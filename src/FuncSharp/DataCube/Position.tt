<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
namespace FuncSharp
{
<#  for (var i = 0; i <= MaxProductArity(); i++) { #>
<#      if (i > 0) { #>
    /// <summary>
    /// A factory for <#= i #>-dimensional data cube positions.
    /// </summary>
    public static class Position<#= i #>
    {
        /// <summary>
        /// Creates a new <#= i #>-dimensional data cube position.
        /// </summary>
        public static <#= PositionType(i) #> Create<#= TypeBracket(i, name: "P") #>(<#= Parameters(i, name: "P") #>)
        {
            return new Position<#= i + TypeBracket(i, name: "P") #>(<#= Values(i, name: "p") #>);
        }

        /// <summary>
        /// Creates a new <#= i #>-dimensional canonical product.
        /// </summary>
        public static <#= PositionType(i) #> Create<#= TypeBracket(i, name: "P") #>(<#= ProductType(i, name: "P") #> p)
        {
            return Create(<#= Properties(i, name: "p.ProductValue") #>);
        }
    }

<#      } #>
    /// <summary>
    /// A <#= i #>-dimensional data cube position.
    /// </summary>
    public sealed class <#= PositionType(i) #> : <#= ProductImplType(i, name: "P") #>
    {
        public Position<#= i #>(<#= Parameters(i, name: "P") #>)
            : base(<#= Values(i, name: "p") #>)
        {
        }

<#      for (var j = 1; j <= i; j++) { #>

        public <#= PositionType(i, except: j) #> ExceptValue<#= j #>
        {
            get { return Position<#= i - 1 #>.Create(<#= Properties(i, name: "ProductValue", except: j) #>); }
        }
<#      } #>
<#      if (i == 0) { #>

        /// <summary>
        /// Creates a new <#= i #>-dimensional data cube position.
        /// </summary>
        public static new <#= PositionType(i) #> Create<#= TypeBracket(i, name: "P") #>(<#= Parameters(i, name: "P") #>)
        {
            return new <#= PositionType(i) #>(<#= Values(i, name: "p") #>);
        }
<#      } #>
    }

<#  } #>
}
