<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;
using System.Collections.Generic;

namespace FuncSharp;

public static partial class IEnumerableExtensions
{
<#  for (var i = 1; i < MaxArity(); i++) { #>

    /// <summary>
    /// For each partition (collection of n-th coproduct elements), invokes the specified function.
    /// </summary>
    public static void PartitionMatch<#= TypeBracket(i) #>(
        this IEnumerable<<#= CoproductType(i) #>> source,
<#= Lines(i, x => Indent(8) + "Action<IReadOnlyList<" + Type(x) + ">> f" + x, separator: ",") #>)
    {
<#= Lines(i, x => Indent(8) + "var list" + x + " = new List<T" + x + ">();") #>

        foreach (var c in source)
        {
            c.Match(
<#= Lines(i, x => Indent(16) + "c" + x + " => list" + x + ".Add(c" + x + ")", separator: ",") #>
            );
        }

<#= Lines(i, x => Indent(8) + "f" + x + "(list" + x + ");") #>
    }

    /// <summary>
    /// For each partition (collection of n-th coproduct elements), invokes the specified function, aggregates results and returns them.
    /// </summary>
    public static IReadOnlyList<TResult> PartitionMatch<<#= FuncTypes(i) #>>(
        this IEnumerable<<#= CoproductType(i) #>> source,
<#= Lines(i, x => Indent(8) + "Func<IReadOnlyList<" + Type(x) + ">, IEnumerable<TResult>> f" + x, separator: ",") #>)
    {
        var result = new List<TResult>();

        source.PartitionMatch(
<#= Lines(i, x => Indent(12) + "c" + x + " => result.AddRange(f" + x + "(c" + x + "))", separator: ",") #>
        );

        return result;
    }

<#      if (i > 1) { #>
    /// <summary>
    /// Takes a collection of coproducts, partitions them into collections and returns those collections.
    /// </summary>
    public static (<#= List(i, x => $"IReadOnlyList<T{x}>") #>) Partition<<#= Types(i, name: "T") #>>(this IEnumerable<<#= CoproductType(i) #>> source)
    {
<#= Lines(i, x => $"{Indent(8)}var list{x} = new List<T{x}>();") #>

        foreach (var c in source)
        {
            c.Match(
<#= Lines(i, x => $"{Indent(16)}c{x} => list{x}.Add(c{x})", separator: ",") #>
            );
        }

        return (<#= List(i, x => $"list{x}") #>);
    }
<#      } #>
<#  } #>
}