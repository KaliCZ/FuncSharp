<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".cs" #>
<#@ include file="../Helpers.ttinclude" #>
using System;

namespace FuncSharp
{
    public static class FuncExtensions
    {
<# for (var i = 0; i < Math.Min(16, MaxProductArity()); i++) { #>
        /// <summary>
        /// Converts the specified function that returns unit into a corresponding action.
        /// </summary>
        public static Action<#= TypeBracket(i) #> ToAction<#= TypeBracket(i) #>(this Func<<#= Types(i, appendSeparator: true) #>Unit> f)
        {
            return (<#= Values(i) #>) => f(<#= Values(i) #>);
        }

        /// <summary>
        /// Converts the specified function to a function that takes <#= i #>-dimensional product as its only parameter instead of
        /// <#= i #> parameters. That allows you to abstract over functions with different arity.
        /// </summary>
        public static Func<<#= ProductType(i) #>, TResult> Normalized<<#= FuncTypes(i) #>>(this <#= FuncType(i) #> f)
        {
            return p => f(<#= Properties(i, name: "ProductValue", accessor: "p.") #>);
        }

        /// <summary>
        /// Converts the specified normalized function back to a standard function used in .NET.
        /// </summary>
        public static <#= FuncType(i) #> Denormalized<<#= FuncTypes(i) #>>(this Func<<#= ProductType(i) #>, TResult> f)
        {
            return (<#= Values(i) #>) => f(Product<#= i #>.Create(<#= Values(i) #>));
        }

<#     if (i > 1) { #>
        /// <summary>
        /// Returnd curried version of the specified function.
        /// </summary>
        public static <#= CurriedFuncType(i) #> Curried<<#= FuncTypes(i) #>>(this <#= FuncType(i) #> f)
        {
            return <#= List(i, x => "t" + x, separator: " => ", appendSeparator: true) #>f(<#= Values(i) #>);
        }

<#     } #>
<# } #>
    }
}

<#+
    public string CurriedFuncType(int i, int current = 1)
    {
        var resultType = "TResult";
        if (current < i)
        {
            resultType = CurriedFuncType(i, current + 1);
        }
        return "Func<T" + current + ", " + resultType + ">";
    }
#>